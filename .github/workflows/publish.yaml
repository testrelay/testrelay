name: publish

on:
  release:
    types:
      - released

jobs:
  deploy_backend:
    name: deploy backend
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@master

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: "backend"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.release.tag_name }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        working-directory: "backend"
        env:
          ECS_TASK: ${{ secrets.ECS_TASK }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend/task-definition.json
          container-name: ${{ secrets.ECS_TASK }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECR_CLUSTER }}
          wait-for-service-stability: true
  deploy_app_portal:
    needs: [ deploy_backend ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: hugorut/react-deploy-to-s3-action@main
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          NODE_ENV: production
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_CANDIDATE_PORTAL_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CANDIDATE_PORTAL_CLOUDFRONT_DISTRIBUTION_ID }}
          REACT_APP_GRAPHQL_URL: ${{secrets.REACT_APP_GRAPHQL_URL}}
          REACT_APP_FIREBASE_API_KEY: ${{secrets.REACT_APP_FIREBASE_API_KEY}}
          REACT_APP_FIREBASE_API_AUTH_DOMAIN: ${{secrets.REACT_APP_FIREBASE_API_AUTH_DOMAIN}}
          REACT_APP_FIREBASE_API_PROJECT_ID: ${{secrets.REACT_APP_FIREBASE_API_PROJECT_ID}}
          REACT_APP_FIREBASE_API_STORAGE_BUCKET: ${{secrets.REACT_APP_FIREBASE_API_STORAGE_BUCKET}}
          REACT_APP_FIREBASE_API_MESSAGING_SENDER: ${{secrets.REACT_APP_FIREBASE_API_MESSAGING_SENDER}}
          REACT_APP_FIREBASE_API_APP_ID: ${{secrets.REACT_APP_FIREBASE_API_APP_ID}}
          REACT_APP_FIREBASE_DATABASE: ${{secrets.REACT_APP_FIREBASE_DATABASE}}
          REACT_APP_TAG_NAME: ${{ github.event.release.tag_name }}
          REACT_APP_GITHUB_CLIENT_ID: ${{secrets.REACT_APP_GITHUB_CLIENT_ID}}
          WORKING_DIR: portal
          AWS_REGION: eu-west-2
          SOURCE_DIR: build
  deploy_candidate_portal:
    needs: [ deploy_backend ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: hugorut/react-deploy-to-s3-action@main
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          NODE_ENV: production
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_PORTAL_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_PORTAL_CLOUDFRONT_DISTRIBUTION_ID }}
          REACT_APP_GRAPHQL_URL: ${{secrets.REACT_APP_GRAPHQL_URL}}
          REACT_APP_FIREBASE_API_KEY: ${{secrets.REACT_APP_FIREBASE_API_KEY}}
          REACT_APP_FIREBASE_API_AUTH_DOMAIN: ${{secrets.REACT_APP_FIREBASE_API_AUTH_DOMAIN}}
          REACT_APP_FIREBASE_API_PROJECT_ID: ${{secrets.REACT_APP_FIREBASE_API_PROJECT_ID}}
          REACT_APP_FIREBASE_API_STORAGE_BUCKET: ${{secrets.REACT_APP_FIREBASE_API_STORAGE_BUCKET}}
          REACT_APP_FIREBASE_API_MESSAGING_SENDER: ${{secrets.REACT_APP_FIREBASE_API_MESSAGING_SENDER}}
          REACT_APP_FIREBASE_API_APP_ID: ${{secrets.REACT_APP_FIREBASE_API_APP_ID}}
          REACT_APP_FIREBASE_DATABASE: ${{secrets.REACT_APP_FIREBASE_DATABASE}}
          REACT_APP_TAG_NAME: ${{ github.event.release.tag_name }}
          REACT_APP_GITHUB_CLIENT_ID: ${{secrets.REACT_APP_GITHUB_CLIENT_ID}}
          WORKING_DIR: portal
          AWS_REGION: eu-west-2
          SOURCE_DIR: build
