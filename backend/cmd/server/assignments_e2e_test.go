//go:build e2e
// +build e2e

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"testing"
	"time"

	"firebase.google.com/go/v4/auth"
	"github.com/bxcodec/faker/v3"
	"github.com/google/go-github/github"
	"github.com/stretchr/testify/require"
)

var insertAssignmentMutation = `
mutation (
	$email: String!,
	$name: String!,
	$choose_until: date!,
	$time_limit: Int!,
	$recruiter_id: Int!,
	$business_id: Int!,
	$test_github_repo: String!,
	$test_name: String!,
	$test_window: Int,
	$test_time_limit: Int!,
	$status: assignment_status_enum = sent
) { 
insert_assignments_one (
	object: {
		candidate_email: $email, 
		candidate_name: $name, 
		choose_until: $choose_until, 
		time_limit: $time_limit, 
		recruiter_id: $recruiter_id
		status: $status
		test: {
			data: {
				user_id: $recruiter_id,
				business_id: $business_id,
				github_repo: $test_github_repo, 
				name: $test_name, 
				test_window: $test_window, 
				time_limit: $test_time_limit
			}
		}
	}
) {
	id
}
}`

var insertUserWithBusiness = `
mutation ($auth_id: String!, $email: String!, $business_name: String!) {
  insert_businesses_one(
	object: {
		name: $business_name, 
		creator: {
			data: {
				email: $email, 
				auth_id: $auth_id
			}
		}
	}
) {
    id
    creator {
      id
    }
  }
}

`

type insertAssignmentMuData struct {
	Insert struct {
		ID int `json:"id"`
	} `json:"insert_assignments_one"`
}

type insertUserWithBusinessMuData struct {
	Insert struct {
		ID      int `json:"id"`
		Creator struct {
			ID int `json:"id"`
		} `json:"creator"`
	} `json:"insert_businesses_one"`
}

type insertUserWithBusinessVars struct {
	AuthID       string `json:"auth_id" faker:"uuid_hyphenated"`
	Email        string `json:"email" faker:"-"`
	BusinessName string `json:"business_name" faker:"username"`
}

type insertAssignmentVars struct {
	RecruiterID    int    `json:"recruiter_id" faker:"-"`
	BusinessID     int    `json:"business_id" faker:"-"`
	Email          string `json:"email" faker:"-"`
	Name           string `json:"name" faker:"name"`
	ChooseUntil    string `json:"choose_until" faker:"date"`
	TimeLimit      int    `json:"time_limit" faker:"oneof: 600, 100, 200"`
	TestGithubRepo string `json:"test_github_repo" faker:"-"`
	TestName       string `json:"test_name" faker:"username"`
	TestWindow     int    `json:"test_window" faker:"oneof: 100,200,600"`
	TestTimeLimit  int    `json:"test_time_limit" faker:"oneof: 100,200,600"`
}

func TestAssignments(t *testing.T) {
	t.Run("/events", func(t *testing.T) {
		t.Run("insert assignment event", func(t *testing.T) {
			nowUnix := time.Now().Unix()
			repoName := fmt.Sprintf("%s-%d", strings.ToLower(faker.Username()), nowUnix)
			repo, _, err := githubClient.Repositories.Create(context.Background(), "", &github.Repository{
				Name:         github.String(repoName),
				Private:      github.Bool(true),
				Description:  github.String(repoName + " generated by e2e test runner"),
				MasterBranch: github.String("master"),
			})
			require.NoError(t, err)

			defer func() {
				_, err := githubClient.Repositories.Delete(context.Background(), repo.GetOwner().GetLogin(), repo.GetName())
				require.NoError(t, err)
			}()

			user := &auth.UserToCreate{}
			recruiterEmail := os.Getenv("RECRUITER_INBOX_ID")
			user.Email(recruiterEmail).Password("mypassword1234").DisplayName(faker.Name())
			rec, err := firebaseClient.CreateUser(context.Background(), user)
			require.NoError(t, err)
			defer func() {
				err := firebaseClient.DeleteUser(context.Background(), rec.UID)
				require.NoError(t, err)
			}()

			vb := insertUserWithBusinessVars{
				Email:  recruiterEmail,
				AuthID: rec.UID,
			}

			var uRes insertUserWithBusinessMuData
			vars := toQueryVars(t, &vb)
			err = hasuraClient.do(insertUserWithBusiness, vars, &uRes)
			require.NoError(t, err)

			candidateEmail := os.Getenv("CANDIDATE_INBOX_ID")
			v := insertAssignmentVars{
				TestGithubRepo: repo.GetCloneURL(),
				Email:          candidateEmail,
				BusinessID:     uRes.Insert.ID,
				RecruiterID:    uRes.Insert.Creator.ID,
			}

			var res insertAssignmentMuData
			vars = toQueryVars(t, &v)
			err = hasuraClient.do(insertAssignmentMutation, vars, &res)
			require.NoError(t, err)

			time.Sleep(time.Second * 30)
			cRec, err := firebaseClient.GetUserByEmail(context.Background(), candidateEmail)
			require.NoError(t, err, "firebase user not generated")
			defer func() {
				err := firebaseClient.DeleteUser(context.Background(), cRec.UID)
				require.NoError(t, err)
			}()
			defer func() {
				// TODO delete the business & user associated with the test
				// make sure to alter hasura so that this cascades for all the added information
			}()
		})

		t.Run("insert assignment_events event", func(t *testing.T) {
		})
	})

	t.Run("/process", func(t *testing.T) {
		t.Run("/init", func(t *testing.T) {

		})
	})
}

func toQueryVars(t *testing.T, a interface{}) map[string]interface{} {
	t.Helper()

	err := faker.FakeData(a)
	require.NoError(t, err)

	b, err := json.Marshal(a)
	require.NoError(t, err)

	var v map[string]interface{}
	err = json.Unmarshal(b, &v)
	require.NoError(t, err)

	return v
}
