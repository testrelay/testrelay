// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/testrelay/testrelay/backend/internal/api (interfaces: Inviter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/testrelay/testrelay/backend/internal/core/user"
)

// MockInviter is a mock of Inviter interface.
type MockInviter struct {
	ctrl     *gomock.Controller
	recorder *MockInviterMockRecorder
}

// MockInviterMockRecorder is the mock recorder for MockInviter.
type MockInviterMockRecorder struct {
	mock *MockInviter
}

// NewMockInviter creates a new mock instance.
func NewMockInviter(ctrl *gomock.Controller) *MockInviter {
	mock := &MockInviter{ctrl: ctrl}
	mock.recorder = &MockInviterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInviter) EXPECT() *MockInviterMockRecorder {
	return m.recorder
}

// Invite mocks base method.
func (m *MockInviter) Invite(arg0, arg1 string, arg2 int64) (*user.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invite", arg0, arg1, arg2)
	ret0, _ := ret[0].(*user.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invite indicates an expected call of Invite.
func (mr *MockInviterMockRecorder) Invite(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invite", reflect.TypeOf((*MockInviter)(nil).Invite), arg0, arg1, arg2)
}
