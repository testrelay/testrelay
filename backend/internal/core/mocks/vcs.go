// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/testrelay/testrelay/backend/internal/core (interfaces: VCSCollaboratorAdder,VCSUploader,VCSCleaner,VCSSubmissionChecker,VCSCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/testrelay/testrelay/backend/internal/core"
)

// MockVCSCollaboratorAdder is a mock of VCSCollaboratorAdder interface.
type MockVCSCollaboratorAdder struct {
	ctrl     *gomock.Controller
	recorder *MockVCSCollaboratorAdderMockRecorder
}

// MockVCSCollaboratorAdderMockRecorder is the mock recorder for MockVCSCollaboratorAdder.
type MockVCSCollaboratorAdderMockRecorder struct {
	mock *MockVCSCollaboratorAdder
}

// NewMockVCSCollaboratorAdder creates a new mock instance.
func NewMockVCSCollaboratorAdder(ctrl *gomock.Controller) *MockVCSCollaboratorAdder {
	mock := &MockVCSCollaboratorAdder{ctrl: ctrl}
	mock.recorder = &MockVCSCollaboratorAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSCollaboratorAdder) EXPECT() *MockVCSCollaboratorAdderMockRecorder {
	return m.recorder
}

// AddCollaborator mocks base method.
func (m *MockVCSCollaboratorAdder) AddCollaborator(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollaborator indicates an expected call of AddCollaborator.
func (mr *MockVCSCollaboratorAdderMockRecorder) AddCollaborator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockVCSCollaboratorAdder)(nil).AddCollaborator), arg0, arg1)
}

// MockVCSUploader is a mock of VCSUploader interface.
type MockVCSUploader struct {
	ctrl     *gomock.Controller
	recorder *MockVCSUploaderMockRecorder
}

// MockVCSUploaderMockRecorder is the mock recorder for MockVCSUploader.
type MockVCSUploaderMockRecorder struct {
	mock *MockVCSUploader
}

// NewMockVCSUploader creates a new mock instance.
func NewMockVCSUploader(ctrl *gomock.Controller) *MockVCSUploader {
	mock := &MockVCSUploader{ctrl: ctrl}
	mock.recorder = &MockVCSUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSUploader) EXPECT() *MockVCSUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockVCSUploader) Upload(arg0 core.UploadDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockVCSUploaderMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockVCSUploader)(nil).Upload), arg0)
}

// MockVCSCleaner is a mock of VCSCleaner interface.
type MockVCSCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockVCSCleanerMockRecorder
}

// MockVCSCleanerMockRecorder is the mock recorder for MockVCSCleaner.
type MockVCSCleanerMockRecorder struct {
	mock *MockVCSCleaner
}

// NewMockVCSCleaner creates a new mock instance.
func NewMockVCSCleaner(ctrl *gomock.Controller) *MockVCSCleaner {
	mock := &MockVCSCleaner{ctrl: ctrl}
	mock.recorder = &MockVCSCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSCleaner) EXPECT() *MockVCSCleanerMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockVCSCleaner) Cleanup(arg0 core.CleanDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockVCSCleanerMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockVCSCleaner)(nil).Cleanup), arg0)
}

// MockVCSSubmissionChecker is a mock of VCSSubmissionChecker interface.
type MockVCSSubmissionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockVCSSubmissionCheckerMockRecorder
}

// MockVCSSubmissionCheckerMockRecorder is the mock recorder for MockVCSSubmissionChecker.
type MockVCSSubmissionCheckerMockRecorder struct {
	mock *MockVCSSubmissionChecker
}

// NewMockVCSSubmissionChecker creates a new mock instance.
func NewMockVCSSubmissionChecker(ctrl *gomock.Controller) *MockVCSSubmissionChecker {
	mock := &MockVCSSubmissionChecker{ctrl: ctrl}
	mock.recorder = &MockVCSSubmissionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSSubmissionChecker) EXPECT() *MockVCSSubmissionCheckerMockRecorder {
	return m.recorder
}

// IsSubmitted mocks base method.
func (m *MockVCSSubmissionChecker) IsSubmitted(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubmitted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubmitted indicates an expected call of IsSubmitted.
func (mr *MockVCSSubmissionCheckerMockRecorder) IsSubmitted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubmitted", reflect.TypeOf((*MockVCSSubmissionChecker)(nil).IsSubmitted), arg0, arg1)
}

// MockVCSCreator is a mock of VCSCreator interface.
type MockVCSCreator struct {
	ctrl     *gomock.Controller
	recorder *MockVCSCreatorMockRecorder
}

// MockVCSCreatorMockRecorder is the mock recorder for MockVCSCreator.
type MockVCSCreatorMockRecorder struct {
	mock *MockVCSCreator
}

// NewMockVCSCreator creates a new mock instance.
func NewMockVCSCreator(ctrl *gomock.Controller) *MockVCSCreator {
	mock := &MockVCSCreator{ctrl: ctrl}
	mock.recorder = &MockVCSCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSCreator) EXPECT() *MockVCSCreatorMockRecorder {
	return m.recorder
}

// CreateRepo mocks base method.
func (m *MockVCSCreator) CreateRepo(arg0, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockVCSCreatorMockRecorder) CreateRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockVCSCreator)(nil).CreateRepo), arg0, arg1, arg2)
}
