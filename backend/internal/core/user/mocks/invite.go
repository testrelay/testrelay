// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/testrelay/testrelay/backend/internal/core/user (interfaces: BusinessFetcher,BusinessLinker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/testrelay/testrelay/backend/internal/core/business"
)

// MockBusinessFetcher is a mock of BusinessFetcher interface.
type MockBusinessFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessFetcherMockRecorder
}

// MockBusinessFetcherMockRecorder is the mock recorder for MockBusinessFetcher.
type MockBusinessFetcherMockRecorder struct {
	mock *MockBusinessFetcher
}

// NewMockBusinessFetcher creates a new mock instance.
func NewMockBusinessFetcher(ctrl *gomock.Controller) *MockBusinessFetcher {
	mock := &MockBusinessFetcher{ctrl: ctrl}
	mock.recorder = &MockBusinessFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessFetcher) EXPECT() *MockBusinessFetcherMockRecorder {
	return m.recorder
}

// GetBusiness mocks base method.
func (m *MockBusinessFetcher) GetBusiness(arg0 int64) (business.Short, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusiness", arg0)
	ret0, _ := ret[0].(business.Short)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusiness indicates an expected call of GetBusiness.
func (mr *MockBusinessFetcherMockRecorder) GetBusiness(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusiness", reflect.TypeOf((*MockBusinessFetcher)(nil).GetBusiness), arg0)
}

// MockBusinessLinker is a mock of BusinessLinker interface.
type MockBusinessLinker struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessLinkerMockRecorder
}

// MockBusinessLinkerMockRecorder is the mock recorder for MockBusinessLinker.
type MockBusinessLinkerMockRecorder struct {
	mock *MockBusinessLinker
}

// NewMockBusinessLinker creates a new mock instance.
func NewMockBusinessLinker(ctrl *gomock.Controller) *MockBusinessLinker {
	mock := &MockBusinessLinker{ctrl: ctrl}
	mock.recorder = &MockBusinessLinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessLinker) EXPECT() *MockBusinessLinkerMockRecorder {
	return m.recorder
}

// LinkUser mocks base method.
func (m *MockBusinessLinker) LinkUser(arg0, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkUser indicates an expected call of LinkUser.
func (mr *MockBusinessLinkerMockRecorder) LinkUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkUser", reflect.TypeOf((*MockBusinessLinker)(nil).LinkUser), arg0, arg1, arg2)
}
