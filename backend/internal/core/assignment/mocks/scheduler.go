// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/testrelay/testrelay/backend/internal/core/assignment (interfaces: Fetcher,ScheduleUpdater,SchedulerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	assignment "github.com/testrelay/testrelay/backend/internal/core/assignment"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// GetAssignment mocks base method.
func (m *MockFetcher) GetAssignment(arg0 int) (assignment.WithTestDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignment", arg0)
	ret0, _ := ret[0].(assignment.WithTestDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignment indicates an expected call of GetAssignment.
func (mr *MockFetcherMockRecorder) GetAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignment", reflect.TypeOf((*MockFetcher)(nil).GetAssignment), arg0)
}

// MockScheduleUpdater is a mock of ScheduleUpdater interface.
type MockScheduleUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleUpdaterMockRecorder
}

// MockScheduleUpdaterMockRecorder is the mock recorder for MockScheduleUpdater.
type MockScheduleUpdaterMockRecorder struct {
	mock *MockScheduleUpdater
}

// NewMockScheduleUpdater creates a new mock instance.
func NewMockScheduleUpdater(ctrl *gomock.Controller) *MockScheduleUpdater {
	mock := &MockScheduleUpdater{ctrl: ctrl}
	mock.recorder = &MockScheduleUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleUpdater) EXPECT() *MockScheduleUpdaterMockRecorder {
	return m.recorder
}

// UpdateAssignmentWithDetails mocks base method.
func (m *MockScheduleUpdater) UpdateAssignmentWithDetails(arg0 int, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssignmentWithDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssignmentWithDetails indicates an expected call of UpdateAssignmentWithDetails.
func (mr *MockScheduleUpdaterMockRecorder) UpdateAssignmentWithDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignmentWithDetails", reflect.TypeOf((*MockScheduleUpdater)(nil).UpdateAssignmentWithDetails), arg0, arg1, arg2)
}

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockSchedulerClient) Start(arg0 assignment.StartInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerClientMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSchedulerClient)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockSchedulerClient) Stop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerClientMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSchedulerClient)(nil).Stop), arg0)
}
