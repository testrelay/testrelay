// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/testrelay/testrelay/backend/internal/events/http (interfaces: AssignmentScheduler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAssignmentScheduler is a mock of AssignmentScheduler interface.
type MockAssignmentScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockAssignmentSchedulerMockRecorder
}

// MockAssignmentSchedulerMockRecorder is the mock recorder for MockAssignmentScheduler.
type MockAssignmentSchedulerMockRecorder struct {
	mock *MockAssignmentScheduler
}

// NewMockAssignmentScheduler creates a new mock instance.
func NewMockAssignmentScheduler(ctrl *gomock.Controller) *MockAssignmentScheduler {
	mock := &MockAssignmentScheduler{ctrl: ctrl}
	mock.recorder = &MockAssignmentSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssignmentScheduler) EXPECT() *MockAssignmentSchedulerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockAssignmentScheduler) Start(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAssignmentSchedulerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAssignmentScheduler)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockAssignmentScheduler) Stop(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockAssignmentSchedulerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAssignmentScheduler)(nil).Stop), arg0)
}
